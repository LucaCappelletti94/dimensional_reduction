[package]
name = "binding"
version = "0.1.0"
edition = "2021"

[package.metadata.maturin]
requires-python = ">=3.7"
requires-dist = ["numpy"]

[lib]
name = "dimensional_reduction"
crate-type = ["cdylib"]

[dependencies.pyo3]
version = "0.16"
features = ["extension-module", "abi3", "abi3-py37", "macros", "multiple-pymethods"]

[dependencies]
dimensional_reduction = {path="../"}
numpy = {git = "https://github.com/LucaCappelletti94/rust-numpy.git", features = ["half"] }
half = {git = "https://github.com/LucaCappelletti94/half-rs.git", features = ["use-intrinsics", "num-traits"]}

[profile.release]
debug = false             # Include debug info.
overflow-checks = true # Provides panic messages in case of overflows
# The opt-level setting controls the number of optimizations Rust will apply to 
# your code, with a range of 0 to 3. Applying more optimizations extends 
# compiling time, so if you’re in development and compiling your code often, 
# you’ll want faster compiling even if the resulting code runs slower. That is 
# the reason the default opt-level for dev is 0. When you’re ready to release 
# your code, it’s best to spend more time compiling. You’ll only compile in 
# release mode once, but you’ll run the compiled program many times, so release 
# mode trades longer compile time for code that runs faster. That is why the 
# default opt-level for the release profile is 3.
opt-level = 3

# This flag controls whether LLVM uses link time optimizations to produce better 
# optimized code, using whole-program analysis, at the cost of longer linking 
# time.
# Perform "fat" LTO which attempts to perform optimizations across all crates 
# within the dependency graph
lto = "fat"

# This option lets you set the default threshold for inlining a function. 
# It takes an unsigned integer as a value. Inlining is based on a cost model, 
# where a higher threshold will allow more inlining.
# The default for opt-level=3 is 275.
#inline-threshold=1000000
